openapi: '3.0.1'
info:
  version: '1.0.0'
  title: 'Api KoaLaa Documentation'
  description: 'Api KOA, Sequelize and TypeScript'
servers:
  - url: 'http://localhost:8000/v1'
    description: 'Development Server'
  - url: 'http://api.example.com/v1'
    description: 'Production Server'
components:
  securitySchemes:
    auth_token:
      type: apiKey
      name: Authorization
      in: header
      description: 'JWT Authorization header using the JWT scheme. Example: “Authorization: JWT {token}”'
  parameters:
    page:
      name: page
      in: query
      required: false
      default: 0
    pageSize:
      name: pageSize
      in: query
      required: false
      default: 10
    filtered:
      name: filtered
      in: query
      required: false
      default: []
      description: 'Example: [{"id": "nama", "value": "test"}]'
    sorted:
      name: sorted
      in: query
      required: false
      default: []
      description: 'Example: [{"id": "createdAt", "desc": true}]'
# security:
#   - auth_token:
paths:
  #
  # Tag Auth
  #
  /auth/sign-up:
    post:
      tags:
        - Auth
      summary: 'Create New Account'
      requestBody:
        required: true
        content:
          'application/x-www-form-urlencoded':
            schema:
              type: object
              properties:
                fullName:
                  type: string
                email:
                  type: string
                newPassword:
                  type: string
                confirmNewPassword:
                  type: string
                phone:
                  type: string
                RoleId:
                  type: string
              required:
                - fullName
                - email
                - newPassword
                - confirmNewPassword
                - phone
                - RoleId
      responses:
        401:
          description: 'Unauthorized'
        200:
          description: 'Create New Account'
  /auth/sign-in:
    post:
      tags:
        - Auth
      summary: 'Login your account'
      requestBody:
        required: true
        content:
          'application/x-www-form-urlencoded':
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        401:
          description: 'Unauthorized'
        200:
          description: 'Login your account'
  /profile:
    get:
      tags:
        - Auth
      summary: 'Get Profile'
      security:
        - auth_token: []
      responses:
        401:
          description: 'Unauthorized'
        200:
          description: 'Get Profile'
  #
  # Tag Role
  #
  /role:
    get:
      tags:
        - Role
      summary: 'Get All Role'
      produces:
        - application/json
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/filtered'
        - $ref: '#/components/parameters/sorted'
      responses:
        401:
          description: 'Unauthorized'
        200:
          description: 'Get All Role'
    post:
      tags:
        - Role
      summary: 'Create New Role'
      security:
        - auth_token: []
      requestBody:
        required: true
        content:
          'application/x-www-form-urlencoded':
            schema:
              type: object
              properties:
                nama:
                  type: string
              required:
                - nama
      responses:
        401:
          description: 'Unauthorized'
        200:
          description: 'Create New Role'
  '/role/{id}':
    get:
      tags:
        - Role
      summary: 'Get Role By Id'
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: 'Role Id'
      responses:
        401:
          description: 'Unauthorized'
        200:
          description: 'Get Role By Id'
    put:
      tags:
        - 'Role'
      summary: 'Update Data Role'
      security:
        - auth_token: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: 'Role Id'
      requestBody:
        required: true
        content:
          'application/x-www-form-urlencoded':
            schema:
              type: object
              properties:
                nama:
                  type: string
              required:
                - nama
      responses:
        401:
          description: 'Unauthorized'
        200:
          description: 'Update Data Role'
    delete:
      tags:
        - 'Role'
      summary: 'Delete Role By Id'
      security:
        - auth_token: []
      produces:
        - 'application/json'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: 'Role Id'
      responses:
        401:
          description: 'Unauthorized'
        200:
          description: 'Delete Role By Id'
